import React, { useEffect, useState } from "react";
import { dataStats } from "@/types/dataStats";
import {
  fetchBattery,
  fetchStatus,
  fetchWeather,
  updateBattery,
  updateStatus,
} from "../../../actions/api";
import { getAuth } from "../../../actions/cookie";
import { parseJwt } from "../../../actions/utils";
import Image from "next/image";
import Battery from "./battery.png";
import {
  Description,
  Dialog,
  DialogPanel,
  DialogTitle,
} from "@headlessui/react";

const dataStatsList = [
  {
    icon: (
      <svg
        width="26"
        height="26"
        viewBox="0 0 26 26"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M10.5626 13.0002C10.5626 11.654 11.6539 10.5627 13.0001 10.5627C14.3463 10.5627 15.4376 11.654 15.4376 13.0002C15.4376 14.3464 14.3463 15.4377 13.0001 15.4377C11.6539 15.4377 10.5626 14.3464 10.5626 13.0002Z"
          fill="white"
        />
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M2.16675 13.0002C2.16675 14.7762 2.62713 15.3743 3.54788 16.5705C5.38638 18.959 8.4697 21.6668 13.0001 21.6668C17.5305 21.6668 20.6138 18.959 22.4523 16.5705C23.373 15.3743 23.8334 14.7762 23.8334 13.0002C23.8334 11.2242 23.373 10.6261 22.4523 9.42985C20.6138 7.04135 17.5305 4.3335 13.0001 4.3335C8.4697 4.3335 5.38638 7.04135 3.54788 9.42985C2.62713 10.6261 2.16675 11.2242 2.16675 13.0002ZM13.0001 8.93766C10.7564 8.93766 8.93758 10.7565 8.93758 13.0002C8.93758 15.2438 10.7564 17.0627 13.0001 17.0627C15.2437 17.0627 17.0626 15.2438 17.0626 13.0002C17.0626 10.7565 15.2437 8.93766 13.0001 8.93766Z"
          fill="white"
        />
      </svg>
    ),
    color: "#3FD97F",
    title: "Switch to Solar Power",
    value: "Switch",
    growthRate: 0.1,
  },
  {
    icon: (
      <svg
        width="26"
        height="26"
        viewBox="0 0 26 26"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M13 23.8332C18.983 23.8332 23.8333 18.9829 23.8333 12.9998C23.8333 7.01675 18.983 2.1665 13 2.1665C7.01687 2.1665 2.16663 7.01675 2.16663 12.9998C2.16663 18.9829 7.01687 23.8332 13 23.8332ZM13.8125 6.49984C13.8125 6.05111 13.4487 5.68734 13 5.68734C12.5512 5.68734 12.1875 6.05111 12.1875 6.49984V6.84297C10.4212 7.15923 8.93746 8.48625 8.93746 10.2915C8.93746 12.3684 10.9013 13.8123 13 13.8123C14.4912 13.8123 15.4375 14.7935 15.4375 15.7082C15.4375 16.6228 14.4912 17.604 13 17.604C11.5088 17.604 10.5625 16.6228 10.5625 15.7082C10.5625 15.2594 10.1987 14.8957 9.74996 14.8957C9.30123 14.8957 8.93746 15.2594 8.93746 15.7082C8.93746 17.5134 10.4212 18.8404 12.1875 19.1567V19.4998C12.1875 19.9486 12.5512 20.3123 13 20.3123C13.4487 20.3123 13.8125 19.9486 13.8125 19.4998V19.1567C15.5788 18.8404 17.0625 17.5134 17.0625 15.7082C17.0625 13.6313 15.0986 12.1873 13 12.1873C11.5088 12.1873 10.5625 11.2061 10.5625 10.2915C10.5625 9.37688 11.5088 8.39567 13 8.39567C14.4912 8.39567 15.4375 9.37688 15.4375 10.2915C15.4375 10.7402 15.8012 11.104 16.25 11.104C16.6987 11.104 17.0625 10.7402 17.0625 10.2915C17.0625 8.48625 15.5788 7.15923 13.8125 6.84297V6.49984Z"
          fill="white"
        />
      </svg>
    ),
    color: "#FF9C55",
    title: "Solar Energy Sold",
    value: "₹40K",
    growthRate: 4.5,
  },
  {
    icon: (
      <svg
        width="26"
        height="26"
        viewBox="0 0 26 26"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M19.0425 4.80065L16.8758 3.66364C14.9739 2.66555 14.0229 2.1665 13 2.1665C11.977 2.1665 11.026 2.66555 9.12411 3.66363L6.95744 4.80065C5.03588 5.80904 3.90635 6.40179 3.20629 7.1946L13 12.0914L22.7936 7.1946C22.0936 6.40179 20.964 5.80904 19.0425 4.80065Z"
          fill="white"
        />
        <path
          d="M23.5607 8.62788L13.8125 13.502V23.7292C14.5902 23.5355 15.4751 23.0711 16.8758 22.336L19.0425 21.199C21.3734 19.9758 22.5389 19.3642 23.1861 18.2651C23.8333 17.1661 23.8333 15.7984 23.8333 13.0632V12.9365C23.8333 10.8861 23.8333 9.60421 23.5607 8.62788Z"
          fill="white"
        />
        <path
          d="M12.1875 23.7292V13.502L2.43923 8.62788C2.16663 9.60421 2.16663 10.8861 2.16663 12.9365V13.0632C2.16663 15.7984 2.16663 17.1661 2.81381 18.2651C3.46099 19.3642 4.62647 19.9758 6.95744 21.199L9.12411 22.336C10.5248 23.0711 11.4097 23.5355 12.1875 23.7292Z"
          fill="white"
        />
      </svg>
    ),
    color: "#8155FF",
    title: "Savings",
    value: "₹5.43K",
    growthRate: 2.59,
  },
  {
    icon: (
      <svg
        width="26"
        height="26"
        viewBox="0 0 26 26"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <ellipse
          cx="9.75106"
          cy="6.49984"
          rx="4.33333"
          ry="4.33333"
          fill="white"
        />
        <ellipse
          cx="9.75106"
          cy="18.4178"
          rx="7.58333"
          ry="4.33333"
          fill="white"
        />
        <path
          d="M22.7496 18.4173C22.7496 20.2123 20.5445 21.6673 17.8521 21.6673C18.6453 20.8003 19.1907 19.712 19.1907 18.4189C19.1907 17.1242 18.644 16.0349 17.8493 15.1674C20.5417 15.1674 22.7496 16.6224 22.7496 18.4173Z"
          fill="white"
        />
        <path
          d="M19.4996 6.50098C19.4996 8.2959 18.0446 9.75098 16.2496 9.75098C15.8582 9.75098 15.483 9.68179 15.1355 9.55498C15.648 8.65355 15.9407 7.61084 15.9407 6.49977C15.9407 5.38952 15.6484 4.34753 15.1366 3.44656C15.4838 3.32001 15.8587 3.25098 16.2496 3.25098C18.0446 3.25098 19.4996 4.70605 19.4996 6.50098Z"
          fill="white"
        />
      </svg>
    ),
    color: "#18BFFF",
    title: "Solar Consumption",
    value: "1.5KW",
    growthRate: -0.95,
  },
];

const DataStatsOne: React.FC<dataStats> = () => {
  const [status, setStatus] = useState("");
  const [battery, setBattery] = useState<number>(0);
  const [user, setUser] = useState<UserType | null>(null);
  const [weatherData, setWeatherData] = useState<{
    min: string;
    max: string;
    curr: string;
  } | null>(null);
  const [sellModal, setSellModal] = useState(false);
  const [sellValue, setSellValue] = useState("");

  useEffect(() => {
    fetchWeather()
      .then((res: any) => {
        console.log("res ", res);
        setWeatherData({
          curr: (res.main.temp_min - 273.15).toFixed(1),
          min: (res.main.temp_min - 273.15).toFixed(1),
          max: (res.main.temp_max - 273.15).toFixed(1),
        });
      })
      .catch((error) => {
        console.log("Error fetching weather, ", error);
      });
  }, []);
  useEffect(() => {
    const fetch = async () => {
      const token = await getAuth();
      const data = parseJwt(token);
      try {
        if (data && data.user) {
          setUser(data.user);
          const res = await fetchStatus(data.user.email);
          const res2 = await fetchBattery(data.user.email);
          setBattery(res2.battery);
          setStatus(res.status);
        }
      } catch (error) {
        console.log("error fetching status: ", error);
      }
    };
    fetch();
  }, []);

  const handleChangeStatus = async () => {
    try {
      const token = await getAuth();
      const data = parseJwt(token);
      try {
        if (data && data.user) {
          const newStatus = status === "solar" ? "grid" : "solar";
          await updateStatus(data.user.email, newStatus);
          setStatus(newStatus);
        }
      } catch (error) {
        console.log("error updating status: ", error);
      }
    } catch (error) {}
  };

  const sellEnergy = async () => {
    try {
      const energy = Number(sellValue);
      if (!isNaN(energy) && energy < Math.min(battery*220, 5000) && user) {
        const newBattery = battery - (energy / 220);
        await updateBattery(user.email, newBattery);
        setSellModal(false)
        setBattery(newBattery)
        console.log(`energy sold ${energy}`)
      }
    } catch (error) {
      console.log("Error selling energy ", error)
    }
  };

  return (
    <>
      <div className=" col-start-10 row-span-2 flex w-[350px] flex-col gap-4 md:gap-6 2xl:gap-7.5">
        <div className="rounded-[10px] bg-white p-6 shadow-1 dark:bg-gray-dark">
          <div
            className="flex h-14.5 w-14.5 items-center justify-center rounded-full"
            style={{ backgroundColor: "#3FD97F" }}
          >
            <svg
              width="26"
              height="26"
              viewBox="0 0 26 26"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M10.5626 13.0002C10.5626 11.654 11.6539 10.5627 13.0001 10.5627C14.3463 10.5627 15.4376 11.654 15.4376 13.0002C15.4376 14.3464 14.3463 15.4377 13.0001 15.4377C11.6539 15.4377 10.5626 14.3464 10.5626 13.0002Z"
                fill="white"
              />
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M2.16675 13.0002C2.16675 14.7762 2.62713 15.3743 3.54788 16.5705C5.38638 18.959 8.4697 21.6668 13.0001 21.6668C17.5305 21.6668 20.6138 18.959 22.4523 16.5705C23.373 15.3743 23.8334 14.7762 23.8334 13.0002C23.8334 11.2242 23.373 10.6261 22.4523 9.42985C20.6138 7.04135 17.5305 4.3335 13.0001 4.3335C8.4697 4.3335 5.38638 7.04135 3.54788 9.42985C2.62713 10.6261 2.16675 11.2242 2.16675 13.0002ZM13.0001 8.93766C10.7564 8.93766 8.93758 10.7565 8.93758 13.0002C8.93758 15.2438 10.7564 17.0627 13.0001 17.0627C15.2437 17.0627 17.0626 15.2438 17.0626 13.0002C17.0626 10.7565 15.2437 8.93766 13.0001 8.93766Z"
                fill="white"
              />
            </svg>
          </div>

          <div className="mt-6 flex items-end justify-between">
            <div>
              <h4 className="mb-1.5 text-heading-6 font-bold text-dark dark:text-white">
                Switch to Solar Power
              </h4>
              <span className="text-body-sm font-medium">
                {" "}
                <div
                  onClick={handleChangeStatus}
                  className={`relative z-10 mt-5 flex h-12 w-[96px] cursor-pointer items-center gap-2.5 rounded-full bg-gray-3 p-[5px] text-dark dark:bg-[#020d1a] dark:text-white`}
                >
                  <div
                    className={`absolute left-0.5 top-1/2 z-1 h-9.5 w-9.5 -translate-y-1/2 rounded-full bg-white transition-transform duration-300 ease-in-out dark:bg-dark-3 ${status === "solar" ? "translate-x-[51px]" : "translate-x-[3px]"}`}
                  />

                  <span className="relative z-10 flex h-9.5 w-full max-w-9.5 items-center justify-center">
                    OFF
                  </span>
                  <span className="relative z-10 flex h-9.5 w-full max-w-9.5 items-center justify-center">
                    ON
                  </span>
                </div>
              </span>
            </div>
          </div>
        </div>
        <div className="rounded-[10px] bg-white p-6 shadow-1 dark:bg-gray-dark">
          <div
            className="flex h-14.5 w-14.5 items-center justify-center rounded-full"
            style={{ backgroundColor: "FF9C55" }}
          >
            <svg
              viewBox="0 0 576 512"
              version="1.1"
              xmlns="http://www.w3.org/2000/svg"
              width="100"
              height="100"
            >
              <path
                d="M0 0 C1.01790619 0.00215515 2.03581238 0.0043103 3.08456421 0.00653076 C17.69363523 0.05620146 32.02575853 0.30709809 46.375 3.3125 C47.34985352 3.51117676 48.32470703 3.70985352 49.32910156 3.91455078 C97.7109774 14.03517194 141.69928269 35.9516877 177.375 70.3125 C178.3640332 71.26068604 178.3640332 71.26068604 179.37304688 72.22802734 C188.86130305 81.37247479 197.6012044 90.66984009 205.375 101.3125 C206.23306152 102.46355017 207.09113451 103.61459177 207.94921875 104.765625 C213.98736829 112.95680614 219.34595521 121.47054105 224.375 130.3125 C224.73948242 130.94430176 225.10396484 131.57610352 225.47949219 132.22705078 C247.08534998 169.97532572 256.85198095 212.74189997 256.6875 255.9375 C256.68534485 256.95540619 256.6831897 257.97331238 256.68096924 259.02206421 C256.63129854 273.63113523 256.38040191 287.96325853 253.375 302.3125 C253.07698486 303.77478027 253.07698486 303.77478027 252.77294922 305.26660156 C242.65232806 353.6484774 220.7358123 397.63678269 186.375 433.3125 C185.74287598 433.97185547 185.11075195 434.63121094 184.45947266 435.31054688 C175.31502521 444.79880305 166.01765991 453.5387044 155.375 461.3125 C154.22394983 462.17056152 153.07290823 463.02863451 151.921875 463.88671875 C143.73224019 469.92427396 135.22961724 475.30707302 126.375 480.3125 C125.66778809 480.7146875 124.96057617 481.116875 124.23193359 481.53125 C101.09654164 494.5566741 75.92537591 503.30551461 49.9375 508.625 C49.21860596 508.77235596 48.49971191 508.91971191 47.7590332 509.0715332 C33.08339502 511.86090125 18.55831162 512.66142619 3.64770508 512.62817383 C0.70811513 512.6250221 -2.2304558 512.64854926 -5.16992188 512.67382812 C-18.54306192 512.71848737 -31.43916711 511.51301542 -44.625 509.3125 C-46.33055054 509.03031616 -46.33055054 509.03031616 -48.07055664 508.74243164 C-91.33802759 500.97044532 -132.38793216 480.98345309 -165.625 452.3125 C-166.37007813 451.67828125 -167.11515625 451.0440625 -167.8828125 450.390625 C-181.38779833 438.57948485 -194.05918743 425.82889772 -204.625 411.3125 C-205.48149066 410.16255169 -206.33826433 409.01281411 -207.1953125 407.86328125 C-213.23534209 399.67315742 -218.61867614 391.16870382 -223.625 382.3125 C-224.0271875 381.60528809 -224.429375 380.89807617 -224.84375 380.16943359 C-237.8691741 357.03404164 -246.61801461 331.86287591 -251.9375 305.875 C-252.08485596 305.15610596 -252.23221191 304.43721191 -252.3840332 303.6965332 C-255.35789088 288.05024391 -255.99800362 272.57681954 -255.9375 256.6875 C-255.93534485 255.66959381 -255.9331897 254.65168762 -255.93096924 253.60293579 C-255.88129854 238.99386477 -255.63040191 224.66174147 -252.625 210.3125 C-252.42632324 209.33764648 -252.22764648 208.36279297 -252.02294922 207.35839844 C-241.90232806 158.9765226 -219.9858123 114.98821731 -185.625 79.3125 C-184.99287598 78.65314453 -184.36075195 77.99378906 -183.70947266 77.31445312 C-174.56502521 67.82619695 -165.26765991 59.0862956 -154.625 51.3125 C-153.47394983 50.45443848 -152.32290823 49.59636549 -151.171875 48.73828125 C-142.98224019 42.70072604 -134.47961724 37.31792698 -125.625 32.3125 C-124.91778809 31.9103125 -124.21057617 31.508125 -123.48193359 31.09375 C-100.34654164 18.0683259 -75.17537591 9.31948539 -49.1875 4 C-48.46860596 3.85264404 -47.74971191 3.70528809 -47.0090332 3.5534668 C-31.36274391 0.57960912 -15.88931954 -0.06050362 0 0 Z "
                fill="#4CAFF6"
                transform="translate(255.625,-0.3125)"
              />
              <path
                d="M0 0 C0.63164062 0.46664062 1.26328125 0.93328125 1.9140625 1.4140625 C10.62755284 8.14533703 17.53180873 18.57208401 23 28 C24.670625 27.67515625 24.670625 27.67515625 26.375 27.34375 C52.00337465 22.57344313 78.07616462 25.13227822 100.33007812 39.80957031 C105.33600882 43.37812558 109.68931948 47.63777173 114 52 C114.66644531 52.65613281 115.33289063 53.31226563 116.01953125 53.98828125 C122.72232044 61.05420123 127.74234535 69.86221057 130.72265625 79.10546875 C133.58718252 89.25202159 133.58718252 89.25202159 140.60546875 96.515625 C143.97212864 98.03771959 147.47046398 99.13196413 150.98681641 100.25292969 C166.95577009 106.17883295 178.5579843 121.6708492 185.75 136.375 C190.17663766 146.8353055 191.2779524 156.29336546 191.375 167.5625 C191.38893799 168.60293457 191.40287598 169.64336914 191.41723633 170.71533203 C191.35392526 181.15919186 189.1961957 190.77991734 184.375 200.0625 C184.02945068 200.73732422 183.68390137 201.41214844 183.32788086 202.10742188 C173.46825976 220.68230294 156.83529982 232.83748451 137 239 C133.7371242 239.68866619 130.51711232 240.00501103 127.19262695 240.2355957 C125.69373538 240.34849803 125.69373538 240.34849803 124.16456318 240.46368122 C106.21810686 241.61648273 88.17377686 241.27061604 70.20063949 241.23571944 C64.63492572 241.22681698 59.0692137 241.2286987 53.50349426 241.2290802 C44.16971414 241.2281491 34.83596689 241.21953915 25.50219727 241.20581055 C14.7604821 241.19006797 4.01880277 241.18481361 -6.7229231 241.1855461 C-18.23979819 241.18622497 -29.75665975 241.17926842 -41.27353072 241.1700995 C-44.55899531 241.16798359 -47.84445766 241.16726046 -51.12992287 241.16686058 C-56.31679563 241.16584534 -61.50363912 241.15965404 -66.69050217 241.14969444 C-68.57729475 241.14681032 -70.4640907 241.1455356 -72.35088539 241.14612198 C-124.41132488 241.15616672 -124.41132488 241.15616672 -142 224 C-155.20956816 208.9123942 -160.27972396 191.80332432 -159.1640625 171.95849609 C-158.05365335 158.7029869 -152.07924701 147.51064869 -142.953125 138.05859375 C-140.84874067 135.95757848 -140.84874067 135.95757848 -139 133 C-139.42410156 132.45214844 -139.84820312 131.90429688 -140.28515625 131.33984375 C-152.06126722 115.42268277 -159.46702911 95.62393068 -159.25 75.75 C-159.24250732 74.83395996 -159.23501465 73.91791992 -159.22729492 72.97412109 C-158.80765705 46.29077884 -148.73026651 23.74205751 -130.75 4.3125 C-93.84703476 -30.43994279 -39.03186269 -31.53024344 0 0 Z "
                fill="#E8E8E8"
                transform="translate(240,147)"
              />
              <path
                d="M0 0 C0.63164062 0.46664062 1.26328125 0.93328125 1.9140625 1.4140625 C10.22583573 7.8350058 17.23063269 17.71816339 22 27 C22 27.99 22 28.98 22 30 C21.39414062 30.23074219 20.78828125 30.46148437 20.1640625 30.69921875 C3.10616228 37.33867837 -11.22882358 46.93473776 -21.61328125 62.37109375 C-23.35563014 64.41774019 -24.43605529 65.12970928 -27 66 C-29.76537792 66.17498761 -32.48337024 66.26894714 -35.25 66.3125 C-55.42001693 67.05938609 -72.85075492 76.0349831 -86.6875 90.6875 C-89.58303058 94.16630292 -91.87555247 97.95948847 -94.125 101.875 C-94.64646606 102.78004272 -94.64646606 102.78004272 -95.1784668 103.70336914 C-96.70120602 106.41724507 -98.01682335 109.04760386 -99.0546875 111.984375 C-100.09042586 114.87759454 -100.89346772 116.74650035 -103 119 C-106.91724953 120.46730118 -110.74467027 121.29084308 -114.83984375 122.078125 C-122.08543159 123.52092616 -128.56994651 127.20315291 -134.5625 131.4375 C-135.7690625 132.2109375 -135.7690625 132.2109375 -137 133 C-143.04831332 130.98389556 -145.85914246 123.21412874 -148.6484375 117.80078125 C-155.0886103 104.25026537 -159.41465069 90.82749966 -159.25 75.75 C-159.24250732 74.83395996 -159.23501465 73.91791992 -159.22729492 72.97412109 C-158.80765705 46.29077884 -148.73026651 23.74205751 -130.75 4.3125 C-93.84703476 -30.43994279 -39.03186269 -31.53024344 0 0 Z "
                fill="#FEE132"
                transform="translate(240,147)"
              />
              <path
                d="M0 0 C1.97079033 2.46021055 3.93864275 4.9224495 5.89453125 7.39453125 C7.91501505 9.94173994 9.9566742 12.47109298 12 15 C12.53367187 15.68449219 13.06734375 16.36898437 13.6171875 17.07421875 C20.97751624 26.10069156 31.17170168 33.71052917 42 38 C42.79019531 38.31710938 43.58039063 38.63421875 44.39453125 38.9609375 C50.2516028 40.92229172 56.05827358 41.35849452 62.1875 41.5 C62.91638428 41.5306958 63.64526855 41.5613916 64.39624023 41.59301758 C72.66950153 41.59568494 80.26712911 38.63442831 88 36 C89.5091847 35.4929713 91.01854595 34.98646782 92.52807617 34.48046875 C97.98841257 32.64391755 103.44590067 30.79875678 108.89453125 28.92773438 C111.22946147 28.12713228 113.56751288 27.33627574 115.90625 26.546875 C116.6022229 26.30523621 117.2981958 26.06359741 118.01525879 25.81463623 C122.68276108 24.25041122 127.09804961 23.47813882 132 23 C131.06211158 26.3763983 130.15574896 27.86965522 127.4375 30.14453125 C123.37485016 32.33743884 120.11332475 32.46610659 115.625 32.4375 C96.06947188 32.94520124 80.10162258 41.5239086 66.03515625 54.86328125 C62.31820699 58.79937037 59.56300192 63.1961167 56.875 67.875 C56.35353394 68.78004272 56.35353394 68.78004272 55.8215332 69.70336914 C54.29879398 72.41724507 52.98317665 75.04760386 51.9453125 77.984375 C50.90957414 80.87759454 50.10653228 82.74650035 48 85 C44.08275047 86.46730118 40.25532973 87.29084308 36.16015625 88.078125 C28.91456841 89.52092616 22.43005349 93.20315291 16.4375 97.4375 C15.2309375 98.2109375 15.2309375 98.2109375 14 99 C7.95168668 96.98389556 5.14085754 89.21412874 2.3515625 83.80078125 C-4.0886103 70.25026537 -8.41465069 56.82749966 -8.25 41.75 C-8.24250732 40.83395996 -8.23501465 39.91791992 -8.22729492 38.97412109 C-8.01604997 25.54177431 -6.07965678 12.15931357 0 0 Z "
                fill="#FEBD2C"
                transform="translate(89,181)"
              />
              <path
                d="M0 0 C7.02025226 3.21538271 12.22117451 7.6232433 16.6328125 13.96875 C17.83924816 17.58805698 17.95549809 20.16106005 17.6328125 23.96875 C15.15982693 28.81960632 12.34934742 31.32815475 7.6328125 33.96875 C-2.74519325 35.67260169 -11.72240435 34.14166547 -20.3671875 27.96875 C-24.41054011 24.29656452 -27.88529857 20.08834676 -28.73828125 14.56640625 C-28.91792323 7.70830941 -28.91792323 7.70830941 -26.1796875 4.03125 C-17.95816553 -1.99786611 -9.8314391 -3.01102079 0 0 Z "
                fill="#FDEB73"
                transform="translate(208.3671875,146.03125)"
              />
            </svg>
          </div>

          <div className="mt-6 flex items-end justify-between">
            <div>
              <h4 className="mb-1.5 text-heading-6 font-bold text-dark dark:text-white">
                {weatherData?.min}°C
              </h4>
              <span className="text-body-sm font-medium">Min</span>
            </div>
            <div>
              <h4 className="mb-1.5 text-heading-6 font-bold text-dark dark:text-white">
                {weatherData?.curr}°C
              </h4>
              <span className="text-body-sm font-medium">Temp.</span>
            </div>
            <div>
              <h4 className="mb-1.5 text-heading-6 font-bold text-dark dark:text-white">
                {weatherData?.max}°C
              </h4>
              <span className="text-body-sm font-medium">Max</span>
            </div>
          </div>
        </div>
        <div className="rounded-[10px] bg-white p-6 shadow-1 dark:bg-gray-dark">
          <div
            className="flex h-14.5 w-14.5 items-center justify-center rounded-full"
            style={{ backgroundColor: "#8155FF" }}
          >
            <svg
              width="26"
              height="26"
              viewBox="0 0 26 26"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M19.0425 4.80065L16.8758 3.66364C14.9739 2.66555 14.0229 2.1665 13 2.1665C11.977 2.1665 11.026 2.66555 9.12411 3.66363L6.95744 4.80065C5.03588 5.80904 3.90635 6.40179 3.20629 7.1946L13 12.0914L22.7936 7.1946C22.0936 6.40179 20.964 5.80904 19.0425 4.80065Z"
                fill="white"
              />
              <path
                d="M23.5607 8.62788L13.8125 13.502V23.7292C14.5902 23.5355 15.4751 23.0711 16.8758 22.336L19.0425 21.199C21.3734 19.9758 22.5389 19.3642 23.1861 18.2651C23.8333 17.1661 23.8333 15.7984 23.8333 13.0632V12.9365C23.8333 10.8861 23.8333 9.60421 23.5607 8.62788Z"
                fill="white"
              />
              <path
                d="M12.1875 23.7292V13.502L2.43923 8.62788C2.16663 9.60421 2.16663 10.8861 2.16663 12.9365V13.0632C2.16663 15.7984 2.16663 17.1661 2.81381 18.2651C3.46099 19.3642 4.62647 19.9758 6.95744 21.199L9.12411 22.336C10.5248 23.0711 11.4097 23.5355 12.1875 23.7292Z"
                fill="white"
              />
            </svg>
          </div>
          <div className="mt-6 flex items-end justify-between">
            <div>
              <h4 className="mb-1.5 text-heading-6 font-bold text-dark dark:text-white">
                {status === "solar" ? "Using Solar Energy" : "Storing Energy"}
              </h4>
              <span className="text-body-sm font-medium">Current Status</span>
            </div>
          </div>
        </div>
        <div
          onClick={() => {
            setSellModal(true);
          }}
          className="cursor-pointer rounded-[10px] bg-white p-6 shadow-1 dark:bg-gray-dark"
        >
          <div className="flex justify-between">
            <div className="flex h-14.5 w-14.5 items-center justify-center rounded-full bg-green-500">
              <img src={Battery.src} height={32} width={32} />
            </div>
            <div>Click here to sell</div>
          </div>
          <div className="mt-6 flex items-end justify-between">
            <div>
              <h4 className="mb-1.5 text-heading-6 font-bold text-dark dark:text-white">
                {Math.min(5000, battery * 220).toFixed(1)} Whr
              </h4>
              <span className="text-body-sm font-medium">
                Energy Available to sell
              </span>
            </div>
          </div>
        </div>
      </div>

      <Dialog
        open={sellModal}
        onClose={() => setSellModal(false)}
        className="relative z-50"
      >
        <div className="fixed inset-0 flex w-screen items-center justify-center">
          <DialogPanel className="max-w-lg gap-2 rounded-lg border-[0.5px]  border-stroke bg-white px-6 pb-5.5  pt-5.5 shadow-default dark:border-dark-3 dark:bg-gray-dark ">
            <DialogTitle className="text-xl font-bold text-dark dark:text-white">
              Sell Energy{" "}
            </DialogTitle>
            <Description className="mb-7  mt-2 font-medium text-dark-5">
              Enter the amount you want to sell
            </Description>

            <div className="">
              <div className="relative mb-6">
                <input
                  type="energy"
                  placeholder={`Enter amount (max ${Math.min(battery*220, 5000)}) `}
                  name="email"
                  value={sellValue}
                  onChange={(e) => setSellValue(e.target.value)}
                  className="w-full rounded-lg border border-stroke bg-transparent py-[15px] pl-6 pr-11 font-medium text-dark outline-none focus:border-primary focus-visible:shadow-none dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
                />
              </div>
              <div className="flex justify-end gap-2">
                <button
                  className="bg-light hover:bg-primary-dark w-full rounded-lg  dark:bg-dark py-3 font-medium bg-gray-2 dark:text-white focus:outline-none"
                  onClick={() => {
                    setSellModal(false);
                  }}
                >
                  Cancel
                </button>
                <button
                  className="hover:bg-primary-dark w-full rounded-lg bg-primary py-3 font-medium text-white focus:outline-none"
                  onClick={sellEnergy}
                >
                  Sell
                </button>
              </div>
            </div>
          </DialogPanel>
        </div>
      </Dialog>
    </>
  );
};

export default DataStatsOne;
